How does Control Flow differ from Data Flow and how does it on a machine level enable abstract concepts such as conditional statements, loops and procedures (use RISC-U)?

Data Flow refers to a state transition of a machine, which means some bits are flipped. "Data Flow", because the data flows between registers and memory.
Examples are instructions like add, which "flows" data from two source registers to one destination register.

Meanwhile Control Flow is whenever the program counter (pc) takes on a new state.
The most trivial Control Flow is implicit: For each instruction, the pc is incremented by 4 (assuming instructions are 4 bytes long and memory is byte addressed).
However there is also non-sequential, explicit Control Flow instructions (in RISC-U):

branch on equal:
beq,rsrc1, rsrc2, immediate: if (rsrc1 == rsrc2) {pc = pc + imm} else {pc = pc + 4}
So if the two given registers contain equal values, then the pc is set to a relative address. Otherwise it simply continues with the next instruction in memory like with most other instructions with implicit control flow.

jump and link:
jal,rdest,immediate: rdest = pc + 4; pc = pc + immediate
So the next instruction's location is stored in rdest and the pc is set to a relative address.

jump and link register:
jalr,rdest,immediate(rsrc)
TODO::::
TODO::::
TODO::::
TODO::::
