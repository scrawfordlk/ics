What is a NULL-terminated string and how does it work internally?

The data structure string is a collection of characters that are stored contiguously in memory. So each character is stored
next to each other in memory. Thus, a string is conceptually really just an array of characters. The string is then referred
to via a pointer to the first character. This is efficient when e.g. passing it as an argument to a procedure, since only
the pointer needs to be copied, rather than every single character.
However, even though we know the beginning of a string, how would we know where it ends? This is where the term NULL-terminated
comes in. This refers to the practice of placing the NULL-Character after the contents of the string, signaling, that the end of
the string has been reached.
Since a string is an array of characters, that raises the question: How characters are stored? Of course, they need to be encoded
in bits in some way. So an encoding can be used to give sequences of bits meaning as characters. A simply standard is ASCII, the
American Standard Code for Information Interchange. ASCII encodes characters using 7 Bits 128 (since 2^7 = 128) different characters used in
American English. This means, a byte is enough to store a character, which is also how it is often done in practice. Examples of ASCII character
encodings are 0000000 for the aforementioned NULL character, 0110000 (in decimal 48) for the character 0 (not the number, but the character) and
0001010 for the linefeed character, which is used to encode a newline. NULL and linefeed are control characters, which are special characters that
aren't printed but rather define some kind of structure.
Due to the fact that ASCII is made by Americans, only characters commonly used in English are represented. So to support more characters, a new
standard was needed. One newer standard is UTF-8, 8-bit Unicode Transformation Format. It is backwards compatible with ASCII, meaning an ASCII
file can be interpreted as a UTF-8 file. UTF-8 uses variable-sized characters, so it can use multiple bytes to encode characters, which is why
it supports a lot more characters than ASCII does.
