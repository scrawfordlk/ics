What is memory management and how can it be done with advantages/disadvantages?

Problem: Programs need memory to run. Often there is a time & space trade off, meaning that
using more memory rewards you with a faster program. However, memory is finite, so there is
a need for strategies/techniques to use memory efficiently. In particular, it is important
to deallocate memory when it is not needed. In small programs this barely matters, since
upon program termination all memory used is freed by the OS anyway, but it does play a bigger role
if memory is scarce or the program runs for a long time. If for example a program runs through a
loop where each iteration some memory is allocated but never deallocated, then we have a memory leak.

What's important when it comes to memory management is the liveness of information:
If information is regarded as live, then that means it is still used/needed by the program.
If information is deemed as dead, then that means that it's not needed anymore.

So the goal of memory management is to keep track of used and free memory.
The more used memory is live the more efficient (since it is actually utilised).
Also, the invariant that free memory is dead must hold, otherwise unsafe memory
access can occur (other programs may mark it as used by them).

Memory Management Tasks:
- Memory allocation: find free memory, return it and mark us used.
- Memory deallocation: mark used memory as free.
- Memory access: load/store memory from used memory.
- Memory defragmentation: find free memory blocks and merge them to avoid fragmentation (having used memory
scattered all over memory instead of next to each other results in possibly not being able to find a big enough
memory block to allocate memory)

"Types" of memory management:
Static memory allocation:
Fixed amount of memory is allocated (determined at compile time), which is only deallocated once the program ends.
Used for components whose size can be determined at compile time and is alive during the entire program.
This is in particular is applicable to the code segment in memory (just contains the compiled program, which
doesn't change dynamically) and the data segment, which stores character/string literals, big integers and global variables
which are all kept live through the whole program.
Advantage:
- Simple
Disadvantage:
- Inflexible (You must know how much memory is needed beforehand and this amount can't be changed dynamically during runtime,
thus there is the potential to allocate too little or too much)
- No deallocation until program terminates.


Dynamic memory allocation: Stack Allocation:
Allocation happens when a new stack frame is pushed onto the stack. (when calling procedure)
Deallocation happens upon destruction of this stack frame. (returning from the procedure)
This is in the stack segment that contains parameters and local variables.
Advantage:
- Dynamic
- Automatic Deallocation
Disadvantage:
- Deallocation is done in reverse order only (LIFO principle of a stack)
- Allocated memory is deallocated as soon as the procedure ends - so the information
allocated can't reach outside the procedure body.

Dynamic memory allocation: Heap Allocation:
Allocation is done on the heap. A pointer to that allocated memory is used to access it.
This can be done using a bump pointer allocator: the allocator points to the memory
address where the next free memory block is. Each allocation, the pointer is bumped up to
the next free memory block.
Advantage:
- Dynamic
- Can live beyond its scope
Disadvantage:
- No automatic deallocation (memory leaks possible), so it must be deallocated manually.

FSM Memory Management:
Manages memory via state transitions. States are remembered by the location in the code during execution.
Advantages:
- Neither allocation nor deallocation is needed. => automatic memory management.
Disadvantage:
- FSMs are limited computational models (only for regular languages) and thus can't always be used.

Garbage Collection:
Uses a garbage collector that frees memory which is guaranteed to contain dead values.
- Advantage:
No need to deallocate.
Disadvantage:
- Garbage collector cannot always know which values are dead and thus may not free much memory.
