How can you write a C* program that computes the power of an integer (with non-negative integer base and exponent) without using the multiplication operator * and with tail recursion?


// Start of program

uint64_t power(uint64_t base, uint64_t exponent);
uint64_t power_tail(uint64_t base, uint64_t exponent, uint64_t result);
uint64_t mult(uint64_t a, uint64_t b);
uint64_t mult_tail(uint64_t n, uint64_t times, uint64_t result);

uint64_t power(uint64_t base, uint64_t exponent) {
  return power_tail(base, exponent, 1);
}

uint64_t power_tail(uint64_t base, uint64_t exponent, uint64_t result) {
  if (exponent == 0)
    return result;
  else
    return power_tail(base, exponent - 1, mult(result, base));
}

uint64_t mult(uint64_t a, uint64_t b) {
  return mult_tail(a, b, 0);
}

uint64_t mult_tail(uint64_t n, uint64_t times, uint64_t result) {
  if (times == 0)
    return result;
  else
    return mult_tail(n, times - 1, result + n);
}
